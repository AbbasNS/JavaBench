{"task_id": "PA19/Pipe.java", "target": "game/pipes/Pipe.java", "code": "```java\npackage game.pipes;\n\nimport game.MapElement;\nimport util.Direction;\nimport util.PipePatterns;\n\npublic class Pipe implements MapElement {\n\n    private final Shape shape;\n    private boolean filled = false;\n\n    /**\n     * Creates a new pipe with a given shape.\n     *\n     * @param shape Shape of the pipe.\n     */\n    public Pipe(Shape shape) {\n        // TODO\n    }\n\n    /**\n     * Sets the pipe as filled.\n     */\n    public void setFilled() {\n        // TODO\n    }\n\n    /**\n     * @return Whether this pipe is filled.\n     */\n    public boolean getFilled() {\n        // TODO\n        return false;\n    }\n\n    /**\n     * @return List of connections for this pipe.\n     * @throws IllegalStateException if {@code this} pipe cannot be identified.\n     */\n    public Direction[] getConnections() {\n        // TODO\n    }\n\n    /**\n     * @return The character representation of this pipe. Note that the representation is different for filled and\n     * unfilled pipes.\n     */\n    @Override\n    public char toSingleChar() {\n        // TODO\n    }\n\n    /**\n     * Converts a String to a Pipe.\n     *\n     * <p>\n     * Here is the list of ASCII representation to the pipes:\n     * TL: Top-Left\n     * TR: Top-Right\n     * BL: Bottom-Left\n     * BR: Bottom-Right\n     * HZ: Horizontal\n     * VT: Vertical\n     * CR: Cross\n     * </p>\n     *\n     * @param rep String representation of the pipe. For example, \"HZ\" corresponds to a pipe of horizontal shape.\n     * @return Pipe identified by the string.\n     * @throws IllegalArgumentException if the String does not represent a known pipe.\n     */\n    public static Pipe fromString(String rep) {\n        // TODO\n    }\n\n    public enum Shape {\n        HORIZONTAL(PipePatterns.Filled.HORIZONTAL, PipePatterns.Unfilled.HORIZONTAL),\n        VERTICAL(PipePatterns.Filled.VERTICAL, PipePatterns.Unfilled.VERTICAL),\n        TOP_LEFT(PipePatterns.Filled.TOP_LEFT, PipePatterns.Unfilled.TOP_LEFT),\n        TOP_RIGHT(PipePatterns.Filled.TOP_RIGHT, PipePatterns.Unfilled.TOP_RIGHT),\n        BOTTOM_LEFT(PipePatterns.Filled.BOTTOM_LEFT, PipePatterns.Unfilled.BOTTOM_LEFT),\n        BOTTOM_RIGHT(PipePatterns.Filled.BOTTOM_RIGHT, PipePatterns.Unfilled.BOTTOM_RIGHT),\n        CROSS(PipePatterns.Filled.CROSS, PipePatterns.Unfilled.CROSS);\n\n        final char filledChar;\n        final char unfilledChar;\n\n        /**\n         *\n         * @param filled Representation of {@code this} shape when filled\n         * @param unfilled Representation of {@code this} shape when unfilled\n         */\n        Shape(char filled, char unfilled) {\n            this.filledChar = filled;\n            this.unfilledChar = unfilled;\n        }\n\n        /**\n         *\n         * @param isFilled The filling state of {@code this} shape\n         * @return The character representation of {@code this} shape according to the filling state\n         */\n        char getCharByState(boolean isFilled) {\n            // TODO\n            return '\\0';\n        }\n    }\n}\n\n```\n", "code_context": "```java\npackage game;\n\n/**\n * Represents a map element.\n */\npublic interface MapElement {\n\n    /**\n     * <p>\n     * Hint: use {@link util.PipePatterns}\n     * </p>\n     *\n     * @return A character representing the map element in game.\n     */\n    char toSingleChar();\n}\n\n```\n\n```java\npackage util;\n\n/**\n * Represents a direction in reference to a {@link game.map.cells.Cell}.\n */\npublic enum Direction {\n    UP, DOWN, LEFT, RIGHT;\n\n    /**\n     * @return The opposite direction of {@code this}.\n     */\n    public Direction getOpposite() {\n        switch (this) {\n            case UP:\n                return DOWN;\n            case DOWN:\n                return UP;\n            case LEFT:\n                return RIGHT;\n            case RIGHT:\n                return LEFT;\n            default:\n                throw new IllegalStateException(\"Unknown direction\");\n        }\n    }\n\n    /**\n     * @return A unit coordinate offset as expressed by {@code this} coordinate.\n     */\n    public Coordinate getOffset() {\n        switch (this) {\n            case UP:\n                return new Coordinate(-1, 0);\n            case DOWN:\n                return new Coordinate(1, 0);\n            case LEFT:\n                return new Coordinate(0, -1);\n            case RIGHT:\n                return new Coordinate(0, 1);\n            default:\n                throw new IllegalStateException(\"Unknown direction\");\n        }\n    }\n}\n\n```\n\n```java\npackage util;\n\n/**\n * A collection of all characters for pipe patterns.\n */\npublic final class PipePatterns {\n\n    private PipePatterns() {\n        // You don't need to instantiate this class to use it!\n    }\n\n    public static final char WALL = '\\u2588';\n\n    public static class Filled {\n        public static final char UP_ARROW = '\\u25B2';\n        public static final char DOWN_ARROW = '\\u25BC';\n        public static final char LEFT_ARROW = '\\u25C0';\n        public static final char RIGHT_ARROW = '\\u25B6';\n\n        public static final char HORIZONTAL = '\\u2501';\n        public static final char VERTICAL = '\\u2503';\n        public static final char TOP_LEFT = '\\u251B';\n        public static final char TOP_RIGHT = '\\u2517';\n        public static final char BOTTOM_LEFT = '\\u2513';\n        public static final char BOTTOM_RIGHT = '\\u250F';\n        public static final char CROSS = '\\u254B';\n    }\n\n    public static class Unfilled {\n        public static final char UP_ARROW = '\\u25B3';\n        public static final char DOWN_ARROW = '\\u25BD';\n        public static final char LEFT_ARROW = '\\u25C1';\n        public static final char RIGHT_ARROW = '\\u25B7';\n\n        public static final char HORIZONTAL = '\\u2550';\n        public static final char VERTICAL = '\\u2551';\n        public static final char TOP_LEFT = '\\u255D';\n        public static final char TOP_RIGHT = '\\u255A';\n        public static final char BOTTOM_LEFT = '\\u2557';\n        public static final char BOTTOM_RIGHT = '\\u2554';\n        public static final char CROSS = '\\u256C';\n    }\n}\n\n```\n"}